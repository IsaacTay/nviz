// Code generated by go-bindata.
// sources:
// frontend/index.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _frontendIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5d\x57\xdb\x38\x10\x7d\xef\xaf\x50\xf5\x0a\xb6\x9c\xc4\x04\xe8\xb1\xb3\x27\x90\x0f\x20\x10\xb6\x7c\x1d\xe0\x4d\x96\xe5\x48\x8e\x2c\x09\x49\x4e\x62\x7e\xfd\x1e\x3b\x50\xb2\x29\xdd\x76\x5b\x9e\xe2\x3b\xbe\xbe\x73\x67\x3c\x1a\x27\xfa\x3c\xb8\x3c\xbe\x79\xf8\x7b\x08\x98\x2b\x44\xef\x53\xb4\xfe\x01\x00\x80\x88\x51\x9c\xae\x2f\x1b\xf8\xd9\xf3\xc0\x15\x7d\x2a\xb9\xa1\x29\x28\xa8\xc3\xc0\xe1\x99\x05\x9e\xb7\xc1\x69\xc2\x84\x61\x63\xa9\x8b\x61\xe9\x32\xef\x00\x6e\xdf\x96\xb8\xa0\x31\x5c\x70\xba\xd4\xca\x38\x08\x88\x92\x8e\x4a\x17\xc3\x25\x4f\x1d\x8b\x53\xba\xe0\x84\x7a\x0d\xd8\x05\x5c\x72\xc7\xb1\xf0\x2c\xc1\x82\xc6\xad\x5d\x60\x99\xe1\x72\xee\x39\xe5\x65\xdc\xc5\x52\xc1\xde\xa7\x37\x7d\xc1\xe5\x1c\x18\x2a\x62\x68\x5d\x25\xa8\x65\x94\x3a\x08\x98\xa1\x59\x0c\x99\x73\xda\x7e\x41\xa8\xc0\x2b\x92\x4a\x3f\x51\xca\x59\x67\xb0\xae\x01\x51\x05\xfa\x16\x40\xa1\x1f\xf8\x81\x97\x50\x87\x11\xb1\xf6\xed\x86\x5f\x70\xe9\x13\x6b\x21\xe0\xd2\xd1\x99\xe1\xae\x8a\xa1\x65\xb8\x73\x10\x7a\xe8\xa1\xab\x07\xdd\xd1\x1d\xba\x5b\xb4\x4f\xce\x64\xbf\xeb\x76\x16\x56\xdc\x76\xb3\xe5\xc3\x7d\x7e\x3c\x72\x64\xa8\x4f\x92\xe9\x59\x20\xaa\xfe\xc8\xde\xdf\xd8\xfc\x28\xc9\xf0\x20\x7f\xee\x9f\xd3\xaf\x76\xda\xbd\x80\x80\x18\x65\xad\x32\x7c\xc6\x65\x0c\xb1\x54\xb2\x2a\x54\x69\x37\xbb\xf7\x5f\xd5\x65\x4a\x3a\xbc\xa4\x56\x15\xb4\x31\xbd\x81\x3d\x6d\x94\x67\x95\xe0\x69\x63\xfe\x83\x04\x89\x32\xf4\x45\x6f\x4b\xf0\xdf\xed\xae\x9f\xb3\xfe\x4c\xa9\x99\xa0\x58\x73\xdb\xf4\x9a\x58\xfb\x57\x86\x0b\x2e\xaa\xf8\x4a\x25\xca\xa9\x2f\x61\x10\xec\xee\x07\xc1\xee\x41\x10\xc0\xef\x2c\xfd\xd4\xb2\xab\x34\x8d\xa1\xa3\x2b\x87\x9a\xf7\xb3\xb6\x50\xdb\x2e\xf0\xcb\x3b\x7b\x99\x69\xf4\x36\xd4\x51\xa2\xd2\x6a\x43\xba\x14\x80\x08\x6c\x6d\x0c\x25\x5e\x00\x89\x17\x5e\xc6\x85\xd8\x48\xfe\x62\x60\x83\xe5\x71\x47\x8b\x2d\x46\xc3\xfa\x46\xca\x30\xc8\xb0\x87\x8d\x51\x4b\x4f\xd0\xcc\xd5\xa8\xbd\x02\x9c\x28\x09\x01\x36\x1c\x7b\x8c\xa7\x29\x95\x31\x74\xa6\xa4\xb0\x17\x21\xbe\x95\x10\x89\xed\xc8\xf7\x16\x00\xd5\x8a\xb0\xf7\x8c\xb0\xf6\x2b\x37\x51\x22\x85\xbd\x61\x4d\x8c\x10\x6b\xbf\xc7\x6d\xbd\x72\x05\x9f\x31\x07\x7b\xad\x76\x27\xdc\x8b\x10\x6b\xfd\x8e\xa5\xba\xc4\x04\x57\xbf\xd0\x1d\xc2\xe8\xc2\x28\xe9\xa5\xaa\x4c\x04\xfd\xbd\x36\xbd\xa7\xab\x05\xae\x3e\x44\xc8\x3a\xa5\x3f\x44\x68\xab\x52\x53\xb7\xf9\x0f\x27\x22\x42\xa5\xd8\x40\x29\x5f\xbc\xa6\xcc\xcb\x22\x51\xae\x4e\x97\x89\x92\xa7\xa0\x3e\x0a\x96\x12\xc7\x95\xdc\x1e\xea\x8d\xa7\xea\x6d\x8c\xb9\xa4\x66\x9b\x83\x52\xbe\xd8\x4c\xdb\xc0\x37\x6c\x89\xe1\xda\x01\x6b\xc8\xdb\xd9\x27\x2a\xa5\x7e\xfe\x54\x52\x53\x35\xc7\x7e\x7d\xe9\x75\xfc\xb6\xdf\xf2\xad\xe0\x45\xb3\x51\xf3\x77\x17\xea\xe4\xac\xa3\xda\x83\x89\x3b\x9d\x2f\x1e\x4e\x27\x9d\xdb\xe1\xf4\xb9\xb8\xd8\x9f\x1c\xcf\xaf\x0c\x32\xc3\x43\xf4\x55\xcf\xba\xb8\xff\x38\x3e\x5b\x8e\x06\x17\x77\xd3\x3e\x1a\xeb\xf1\x68\x74\xd8\x61\xf7\x7a\xbc\x37\x99\x4f\x7f\xbc\x50\x23\xb4\xf6\xda\xfb\x89\xf9\x54\xe6\xd6\x27\x42\x95\x69\x26\x70\xbd\xec\x54\x81\x70\x8e\x57\x48\xf0\xc4\x22\xad\xb4\xa6\xc6\xcf\x2d\x6a\xf9\xad\x96\x1f\xa0\xb2\x48\x5f\x83\x3f\xae\x2a\x41\xb7\xdd\x4a\xf3\xa3\xe1\x89\xbe\xcc\x50\xb8\xd3\x92\xcf\x23\x6d\xf6\x3a\x72\x75\x7d\xbd\x33\x3e\x3f\x9e\x67\xcb\xa3\x74\x34\xbd\x59\x39\x22\x9e\x9e\xa8\x3c\xbd\xce\x96\xfd\x67\x3d\xc1\x17\xd3\xd1\xb4\xc8\xc3\x3f\xae\xea\x7f\x7d\xfd\xf2\xed\x8f\xdf\xfb\x45\xb1\xa0\x9f\xf0\x7b\xc2\xc2\xc7\x81\xda\x77\xfa\x90\x4d\x1e\xc3\x1b\x7b\x92\xf0\x20\xdc\x9f\x9a\xc9\xf8\xfc\xb2\x73\x3d\x3c\xeb\xcf\xc2\xbd\xfc\x7e\x25\xc7\xa7\xd9\xc3\xf3\x3c\xbc\xe6\x87\xc1\xd5\xe0\xf4\x69\x5a\xb4\x7e\xb5\xa8\x08\xad\x37\x76\x84\xd6\x7f\x52\x3e\xfd\x13\x00\x00\xff\xff\x94\x97\x65\xbc\xbd\x08\x00\x00")

func frontendIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_frontendIndexHtml,
		"frontend/index.html",
	)
}

func frontendIndexHtml() (*asset, error) {
	bytes, err := frontendIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/index.html", size: 2237, mode: os.FileMode(420), modTime: time.Unix(1507984587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"frontend/index.html": frontendIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"frontend": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{frontendIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
